import "@fluencelabs/aqua-lib/builtin.aqua"
import "deals.aqua"
import "services.aqua"
import "@fluencelabs/registry/subnetwork.aqua"
import Registry, Record from "@fluencelabs/registry/registry-service.aqua"
import "@fluencelabs/spell/spell_service.aqua"

export randomLoadBalancingEth, roundRobinEth, quorumEth, Counter, Logger, optimizedEth

data QuorumResult:
  isPassed: bool
  value: string
  results: []JsonString

data CallResult:
  result: JsonString
  provider: string

data WorkerWithProvider:
  peer_id: string
  relay_id: []string
  provider: string

service Logger("logger"):
  log(s: []string)
  logNum(n: u32)
  logCall(s: string)
  logWorker(w: Record)

service NumOp("op"):
  identity(n: u64) -> i64

service Counter("counter"):
  incrementAndReturn() -> u32

service QuorumChecker("quorum"):
  check(results: []CallResult, minResults: u32) -> QuorumResult

service IndexCounter("indexCounter"):
  init()
  getCurrentAndIncrement() -> u32

service ScoreTracker("scoreTracker"):
  updateScores(results: []CallResult, mode: string, isQuorumPassed: bool)
  getProvidersByScore() -> []string

func empty() -> JsonString:
  <- JsonString(value = "", success = true, error = "")

func call(uri: string, method: string, jsonArgs: []string) -> JsonString:
  res <- EthRpc.eth_call(uri, method, jsonArgs)
  <- res

func getWorkers() -> []Record:
  workersInfo <- getWorkersInfo()
  dealId = workersInfo.defaultWorker.dealId
  on HOST_PEER_ID:
    workersOp <- resolveSubnetwork(dealId)
  <- workersOp!

func callOnWorker(worker: Record, uri: string, method: string, jsonArgs: []string, callFunc: string, string, []string -> JsonString) -> JsonString:
  on worker.metadata.peer_id via worker.metadata.relay_id:
    result <- callFunc(uri, method, jsonArgs)
  <- result

func randomLoadBalancing(uris: []string, method: string, jsonArgs: []string, callFunc: string, string, []string -> JsonString) -> JsonString:
  on HOST_PEER_ID:
    workers <- getWorkers()
    workersNum = workers.length
    -- choose worker randomly
    timeW <- NumOp.identity(Peer.timestamp_sec())
    workerNumber = timeW % workers.length
    worker = workers[workerNumber]
    -- choose provider randomly
    timeP <- NumOp.identity(Peer.timestamp_sec())
    providerNumber = timeP % uris.length
    provider = uris[providerNumber]
    result <- callOnWorker(worker, provider, method, jsonArgs, callFunc)
  Logger.logWorker(worker)
  Logger.logCall(uris[providerNumber])
  <- result

func randomLoadBalancingEth(uris: []string, method: string, jsonArgs: []string) -> JsonString:
  <- randomLoadBalancing(uris, method, jsonArgs, call)

func roundRobin(uris: []string, method: string, jsonArgs: []string, counterServiceId: string, counterPeerId: string, callFunc: string, string, []string -> JsonString) -> JsonString:
  on counterPeerId:
    Counter counterServiceId
    requestNumber <- Counter.incrementAndReturn()
  on HOST_PEER_ID:
    workers <- getWorkers()
    workerNumber = requestNumber % workers.length
    worker = workers[workerNumber]
    providerNumber = requestNumber % uris.length
    provider = uris[providerNumber]
    result <- callOnWorker(worker, provider, method, jsonArgs, callFunc)
  Logger.logWorker(worker)
  Logger.logCall(uris[providerNumber])
  <- result

func roundRobinEth(uris: []string, method: string, jsonArgs: []string, counterServiceId: string, counterPeerId: string) -> JsonString:
  <- roundRobin(uris, method, jsonArgs, counterServiceId, counterPeerId, call)

func getWorkersWithProviders(uris: []string) -> []WorkerWithProvider:
  workersWithProvider: *WorkerWithProvider

  on INIT_PEER_ID via HOST_PEER_ID:
    IndexCounter.init()

  on HOST_PEER_ID:
    workers <- getWorkers()
    for uri <- uris:
      on INIT_PEER_ID via HOST_PEER_ID:
        i <- IndexCounter.getCurrentAndIncrement()
      worker = workers[i]
      workersWithProvider <<- WorkerWithProvider(peer_id = worker.metadata.peer_id, relay_id = worker.metadata.relay_id, provider = uri)
  <- workersWithProvider

func quorum(
  uris: []string, quorumNumber: u32, timeout: u32, method: string, jsonArgs: []string, quorumServiceId: string, quorumPeerId: string, scoreTrackerServiceId: string, scoreTrackerPeerId: string,
  callFunc: string, string, []string -> JsonString
) -> QuorumResult:
  results: *CallResult
  on HOST_PEER_ID:
    workersWithProviders <- getWorkersWithProviders(uris)
    for workerWithProvider <- workersWithProviders par:
      on workerWithProvider.peer_id via workerWithProvider.relay_id:
        provider = workerWithProvider.provider
        result <- callFunc(provider, method, jsonArgs)
        results <<- CallResult(result = result, provider = provider)
    -- wait all results from all workers with timeout
    join results[workersWithProviders.length - 1]
    par Peer.timeout(timeout, "")
  on quorumPeerId via HOST_PEER_ID:
    QuorumChecker quorumServiceId
    -- check all results that we got
    quorumResult <- QuorumChecker.check(results, quorumNumber)
  on scoreTrackerPeerId via HOST_PEER_ID:
    ScoreTracker scoreTrackerServiceId
    ScoreTracker.updateScores(results, quorumResult.value, quorumResult.isPassed)
  <- quorumResult

func quorumEth(uris: []string, quorumNumber: u32, timeout: u32, method: string, jsonArgs: []string, quorumServiceId: string, quorumPeerId: string, scoreTrackerServiceId: string, scoreTrackerPeerId: string ) -> QuorumResult:
  <- quorum(uris, quorumNumber, timeout, method, jsonArgs, quorumServiceId, quorumPeerId, scoreTrackerServiceId, scoreTrackerPeerId, call)

-- Executes an rpc call priotitizing providers with the highest score and handling failover.
-- Will first try with the provider with the highest score, if it fails will try with the next one, and so on.
func optimized(method: string, jsonArgs: []string, scoreTrackerServiceId: string, scoreTrackerPeerId: string, callFunc: string, string, []string -> JsonString) -> ?JsonString:
  return: ?JsonString

  on scoreTrackerPeerId via HOST_PEER_ID:
    ScoreTracker scoreTrackerServiceId
    providers <- ScoreTracker.getProvidersByScore()

  on HOST_PEER_ID:
    workers <- getWorkers()
    worker = workers[0]

    for provider <- providers:
      if return == nil:
        result <- callOnWorker(worker, provider, method, jsonArgs, callFunc)

        -- break loop and return if call had success otherwise go to next provider
        if result.success:
          return <<- result
  <- return

func optimizedEth(method: string, jsonArgs: []string, scoreTrackerServiceId: string, scoreTrackerPeerId: string) -> ?JsonString:
  <- optimized(method, jsonArgs, scoreTrackerServiceId, scoreTrackerPeerId, call)